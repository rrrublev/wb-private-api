/* eslint-disable no-undef */
const Constants = require("../src/Constants");
const WBPrivateAPI = require("../src/WBPrivateAPI");
const WBProduct = require("../src/WBProduct");

const wbapi = new WBPrivateAPI({
  destination: Constants.DESTINATIONS.MOSCOW,
});

describe("–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ WBProduct.getStocks()", () => {
  let testProduct;
  let testProductId;

  beforeAll(async () => {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –ø–æ–∏—Å–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log("üîç –ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...");
    const catalog = await wbapi.search("—à–≤–∞–±—Ä–∞ zetter", 1);
    expect(catalog.products.length).toBeGreaterThan(0);

    testProduct = catalog.products[0];
    console.log(testProduct);

    testProductId = testProduct.id;

    console.log(
      `üì¶ –í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ID ${testProductId}, "${testProduct.name}"`
    );
  }, 30000);

  test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ .getStocks() –Ω–∞ —Ç–æ–≤–∞—Ä–µ –∏–∑ –ø–æ–∏—Å–∫–∞", async () => {
    try {
      const product = new WBProduct(testProduct);
      console.log(`üîÑ –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${testProductId}...`);

      const stocks = await product.getStocks();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω—É–ª –º–∞—Å—Å–∏–≤
      expect(Array.isArray(stocks)).toBeTruthy();
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: ${stocks.length}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
      if (stocks.length > 0) {
        const firstStock = stocks[0];
        console.log("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞:", Object.keys(firstStock));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
        expect(firstStock).toHaveProperty("wh"); // ID —Å–∫–ª–∞–¥–∞
        expect(typeof firstStock.wh).toBe("number");

        if (firstStock.qty !== undefined) {
          expect(typeof firstStock.qty).toBe("number");
          expect(firstStock.qty).toBeGreaterThanOrEqual(0);
        }

        console.log(
          `üì¶ –ü–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥: ID ${firstStock.wh}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${
            firstStock.qty || "N/A"
          }`
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º totalStocks –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
      if (product.totalStocks !== undefined) {
        expect(typeof product.totalStocks).toBe("number");
        expect(product.totalStocks).toBeGreaterThanOrEqual(0);
        console.log(`üìà –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${product.totalStocks}`);
      }
    } catch (error) {
      if (error.response?.status === 404) {
        console.log("‚ö†Ô∏è  API —ç–Ω–¥–ø–æ–∏–Ω—Ç getStocks –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (404)");
        console.log(
          "üìù –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è —Å–∏—Ç—É–∞—Ü–∏—è - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        );
        expect(error.response.status).toBe(404);
      } else {
        console.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error.message);
        throw error;
      }
    }
  }, 30000);

  test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ .getStocks() —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏", async () => {
    try {
      console.log("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º getStocks() –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö...");

      // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const catalog = await wbapi.search("—Ñ—É—Ç–±–æ–ª–∫–∞", 1);
      const testProducts = catalog.products.slice(0, 3); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞

      let successCount = 0;
      let errorCount = 0;
      let notFoundCount = 0;

      for (let i = 0; i < testProducts.length; i++) {
        const productData = testProducts[i];
        const product = new WBProduct(productData);

        try {
          console.log(`üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä ${i + 1}/3: ID ${productData.id}`);
          const stocks = await product.getStocks();

          expect(Array.isArray(stocks)).toBeTruthy();
          successCount++;

          console.log(
            `  ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –æ—Å—Ç–∞—Ç–∫–∏: ${stocks.length} —Å–∫–ª–∞–¥–æ–≤`
          );

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
          await new Promise((resolve) => setTimeout(resolve, 500));
        } catch (error) {
          if (error.response?.status === 404) {
            notFoundCount++;
            console.log(`  ‚ö†Ô∏è  –¢–æ–≤–∞—Ä ${productData.id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (404)`);
          } else {
            errorCount++;
            console.log(
              `  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${productData.id}:`,
              error.message
            );
          }
        }
      }

      console.log(
        `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: —É—Å–ø–µ—à–Ω–æ ${successCount}, 404 –æ—à–∏–±–æ–∫ ${notFoundCount}, –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ ${errorCount}`
      );

      // –ï—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (404), —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
      if (notFoundCount === testProducts.length) {
        console.log(
          "üìù –í—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ getStocks API - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è —Å–∏—Ç—É–∞—Ü–∏—è"
        );
        expect(notFoundCount).toBe(testProducts.length);
      } else {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö
        expect(successCount + notFoundCount + errorCount).toBe(
          testProducts.length
        );
      }
    } catch (error) {
      console.error(
        "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:",
        error.message
      );
      throw error;
    }
  }, 60000);

  test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ .getStocks()", async () => {
    console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ getStocks()...");

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID
    const invalidProduct = new WBProduct({ id: 999999999 });

    try {
      await invalidProduct.getStocks();
      // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –∑–∞–ø—Ä–æ—Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
      console.log("‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞");
    } catch (error) {
      // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
      expect(error).toBeDefined();
      console.log(`‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: ${error.message}`);

      if (error.response) {
        expect([404, 400, 500]).toContain(error.response.status);
        console.log(`üìã –°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏: ${error.response.status}`);
      }
    }
  }, 15000);

  test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ .getStocks()", async () => {
    if (!testProduct) {
      console.log(
        "‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"
      );
      return;
    }

    console.log("‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å getStocks()...");

    const product = new WBProduct(testProduct);
    const startTime = Date.now();

    try {
      await product.getStocks();
      const duration = Date.now() - startTime;

      console.log(`‚ö° –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è getStocks(): ${duration}–º—Å`);

      // –û–∂–∏–¥–∞–µ–º —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è (–º–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥)
      expect(duration).toBeLessThan(10000);

      if (duration < 1000) {
        console.log("üöÄ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (< 1 —Å–µ–∫)");
      } else if (duration < 3000) {
        console.log("‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (< 3 —Å–µ–∫)");
      } else {
        console.log("‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (> 3 —Å–µ–∫)");
      }
    } catch (error) {
      const duration = Date.now() - startTime;
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ ${duration}–º—Å: ${error.message}`);

      if (error.response?.status === 404) {
        console.log("üìù 404 –æ—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ–º–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤");
        expect(error.response.status).toBe(404);
      } else {
        throw error;
      }
    }
  }, 15000);

  afterAll(() => {
    console.log("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è getStocks()");
  });
});
